rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Users collection rules
    match /users/{userId} {
      // Users can read their own document completely
      // Other authenticated users can only read public fields
      allow read: if isAuthenticated();

      // Only the user can create/update their own document
      allow create: if isOwner(userId) &&
                       request.resource.data.uid == userId &&
                       request.resource.data.keys().hasAll(['uid', 'email', 'createdAt']);

      allow update: if isOwner(userId) &&
                       // Prevent changing immutable fields
                       request.resource.data.uid == resource.data.uid &&
                       request.resource.data.createdAt == resource.data.createdAt;

      // Users cannot delete their own documents (use soft delete with account deactivation)
      allow delete: if false;
    }

    // Conversations collection rules
    match /conversations/{conversationId} {
      // Helper to check if user is a participant
      function isParticipant() {
        return isAuthenticated() &&
               request.auth.uid in resource.data.participantIds;
      }

      function isNewParticipant() {
        return isAuthenticated() &&
               request.auth.uid in request.resource.data.participantIds;
      }

      // Participants can read conversations they're part of
      allow read: if isParticipant();

      // Any authenticated user can create a conversation if they're a participant
      allow create: if isNewParticipant() &&
                       request.resource.data.keys().hasAll(['participantIds', 'type', 'createdAt', 'lastUpdatedAt']) &&
                       request.resource.data.participantIds.size() >= 2 &&
                       request.auth.uid in request.resource.data.participantIds;

      // Only participants can update conversations
      allow update: if isParticipant() &&
                       // Prevent changing participant list (use separate add/remove operations)
                       request.resource.data.participantIds == resource.data.participantIds &&
                       // Prevent changing creation timestamp
                       request.resource.data.createdAt == resource.data.createdAt;

      // Only participants can delete conversations (soft delete recommended)
      allow delete: if isParticipant();

      // Messages subcollection
      match /messages/{messageId} {
        // Participants can read all messages in their conversations
        allow read: if isAuthenticated() &&
                       request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participantIds;

        // Participants can create messages if they're the sender
        allow create: if isAuthenticated() &&
                         request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participantIds &&
                         request.resource.data.senderId == request.auth.uid &&
                         request.resource.data.keys().hasAll(['senderId', 'text', 'timestamp', 'type']);

        // Only the message sender can update their own messages
        allow update: if isAuthenticated() &&
                         resource.data.senderId == request.auth.uid &&
                         // Prevent changing immutable fields
                         request.resource.data.senderId == resource.data.senderId &&
                         request.resource.data.timestamp == resource.data.timestamp;

        // Only the message sender can delete their own messages
        allow delete: if isAuthenticated() &&
                         resource.data.senderId == request.auth.uid;
      }
    }

    // Group conversations collection rules (placeholder for future tasks)
    match /group-conversations/{groupId} {
      allow read, write: if false; // Will be implemented later

      match /messages/{messageId} {
        allow read, write: if false; // Will be implemented later
      }
    }

    // Default deny all other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
